<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_65) on Thu Apr 03 13:38:30 BST 2014 -->
<TITLE>
TreeMapPanel
</TITLE>

<META NAME="date" CONTENT="2014-04-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../processingapi.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="TreeMapPanel";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/TreeMapPanel.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/gicentre/treemappa/TreeMappa.html" title="class in org.gicentre.treemappa"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/gicentre/treemappa/TreeMapProperties.html" title="class in org.gicentre.treemappa"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/gicentre/treemappa/TreeMapPanel.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TreeMapPanel.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_classes_inherited_from_class_javax.swing.JPanel">NESTED</A>&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_javax.swing.JComponent">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.gicentre.treemappa</FONT>
<BR>
Class TreeMapPanel</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.awt.Component
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.awt.Container
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">javax.swing.JComponent
              <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">javax.swing.JPanel
                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.gicentre.treemappa.TreeMapPanel</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>TreeMapPanel</B><DT>extends javax.swing.JPanel</DL>
</PRE>

<P>
Class to provide a visual representation of the tree map.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>3.2.1, 3rd April, 2014.</DD>
<DT><B>Author:</B></DT>
  <DD>Jo Wood, giCentre.</DD>
<DT><B>See Also:</B><DD><A HREF="../../../serialized-form.html#org.gicentre.treemappa.TreeMapPanel">Serialized Form</A></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->

<A NAME="nested_class_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Nested Class Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="nested_classes_inherited_from_class_javax.swing.JPanel"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Nested classes/interfaces inherited from class javax.swing.JPanel</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>javax.swing.JPanel.AccessibleJPanel</CODE></TD>
</TR>
</TABLE>
&nbsp;
<A NAME="nested_classes_inherited_from_class_javax.swing.JComponent"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Nested classes/interfaces inherited from class javax.swing.JComponent</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>javax.swing.JComponent.AccessibleJComponent</CODE></TD>
</TR>
</TABLE>
&nbsp;
<A NAME="nested_classes_inherited_from_class_java.awt.Container"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Nested classes/interfaces inherited from class java.awt.Container</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>java.awt.Container.AccessibleAWTContainer</CODE></TD>
</TR>
</TABLE>
&nbsp;
<A NAME="nested_classes_inherited_from_class_java.awt.Component"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Nested classes/interfaces inherited from class java.awt.Component</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>java.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_javax.swing.JComponent"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class javax.swing.JComponent</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>accessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_java.awt.Component"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class java.awt.Component</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_java.awt.image.ImageObserver"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface java.awt.image.ImageObserver</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#TreeMapPanel(int, int, org.gicentre.treemappa.TreeMappa)">TreeMapPanel</A></B>(int&nbsp;width,
             int&nbsp;height,
             <A HREF="../../../org/gicentre/treemappa/TreeMappa.html" title="class in org.gicentre.treemappa">TreeMappa</A>&nbsp;treeMappa)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the panel in which to place the visual representation of the tree map.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getBorders()">getBorders</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the set of ordered border width settings for each level of the treemap hierarchy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getBranchAlignX()">getBranchAlignX</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the Processing branch text horizontal alignment type, one of the Processing codes LEFT, CENTER or RIGHT.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getBranchAlignY()">getBranchAlignY</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the Processing branch text vertical alignment type, one of the Processing codes TOP, CENTER or BOTTOM.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;org.gicentre.utils.colour.ColourTable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getColourTable()">getColourTable</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the colour table currently used to identify treemap node colours.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getCurvature()">getCurvature</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the curvature radius of rounded rectangles.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getHeight()">getHeight</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the height of the panel containing the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.awt.image.BufferedImage</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getImage()">getImage</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the treemap image assuming it can store alpha (transparency) values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.awt.image.BufferedImage</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getImage(boolean)">getImage</A></B>(boolean&nbsp;hasAlpha)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the treemap image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getLayouts()">getLayouts</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the currently used treemap layouts at each level of the hierarchy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getLeafAlignX()">getLeafAlignX</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the Processing leaf text horizontal alignment type, one of the Processing codes LEFT, CENTER or RIGHT.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getLeafAlignY()">getLeafAlignY</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides the Processing leaf text vertical alignment type, one of the Processing codes TOP, CENTER or BOTTOM.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.awt.geom.Point2D</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getPixelToGeo(java.awt.geom.Point2D)">getPixelToGeo</A></B>(java.awt.geom.Point2D&nbsp;pxl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Transforms the given point from pixel to georeferenced coordinates.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.awt.Dimension</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getSize()">getSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the size of the panel containing the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#getWidth()">getWidth</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports the width of the panel containing the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#oCut(int)">oCut</A></B>(int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the tree data from a the given level of the hierarchy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#paintComponent(java.awt.Graphics)">paintComponent</A></B>(java.awt.Graphics&nbsp;g)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Draws the tree map nodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setAlignment(int, java.lang.String)">setAlignment</A></B>(int&nbsp;level,
             java.lang.String&nbsp;alignment)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the alignment setting for the given level of the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setAlignments(java.lang.String)">setAlignments</A></B>(java.lang.String&nbsp;alignment)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the alignment settings for all levels within the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setAllowVerticalLabels(boolean)">setAllowVerticalLabels</A></B>(boolean&nbsp;allow)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets a whether or not vertical text labels are allowed for tall thin rectangles.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorder(int, float)">setBorder</A></B>(int&nbsp;level,
          float&nbsp;borderSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the border size of the nodes at the given level in the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorderColour(java.awt.Color)">setBorderColour</A></B>(java.awt.Color&nbsp;borderColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display treemap borders.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorderColour(int)">setBorderColour</A></B>(int&nbsp;borderColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display treemap borders.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorders(double)">setBorders</A></B>(double&nbsp;borderSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the border size of the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorderWeight(int, float)">setBorderWeight</A></B>(int&nbsp;level,
                float&nbsp;borderWeight)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the border weight of the nodes at the given level in the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBorderWeights(float)">setBorderWeights</A></B>(float&nbsp;borderWeight)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the border weight of the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchFont(int, java.lang.String)">setBranchFont</A></B>(int&nbsp;level,
              java.lang.String&nbsp;fontName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the font used to display branch text at the given level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchFonts(java.lang.String)">setBranchFonts</A></B>(java.lang.String&nbsp;fontName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the font used to display text at all branch levels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchMaxTextSize(int, float)">setBranchMaxTextSize</A></B>(int&nbsp;level,
                     float&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the maximum text size of the branch labels at the given branch level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchMaxTextSizes(float)">setBranchMaxTextSizes</A></B>(float&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the maximum text size of the branch labels at all hierarchy levels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchTextAlignment(int, int)">setBranchTextAlignment</A></B>(int&nbsp;alignX,
                       int&nbsp;alignY)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the text alignment of branch labels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchTextColour(int, java.awt.Color)">setBranchTextColour</A></B>(int&nbsp;level,
                    java.awt.Color&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display branch text at the given level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchTextColour(int, int)">setBranchTextColour</A></B>(int&nbsp;level,
                    int&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display branch text at the given level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchTextColours(java.awt.Color)">setBranchTextColours</A></B>(java.awt.Color&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display text at all branch levels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchTextColours(int)">setBranchTextColours</A></B>(int&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display text at all branch levels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchVectorWidth(int, float)">setBranchVectorWidth</A></B>(int&nbsp;level,
                     float&nbsp;vectWidth)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the width of the branch displacement vectors at the given branch level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setBranchVectorWidths(float)">setBranchVectorWidths</A></B>(float&nbsp;vectWidth)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the width of the branch displacement vectors at all branch levels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setColourTable(org.gicentre.utils.colour.ColourTable)">setColourTable</A></B>(org.gicentre.utils.colour.ColourTable&nbsp;cTable)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets a new colour table to be used to identify treemap node colours.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setCurvature(float)">setCurvature</A></B>(float&nbsp;curveRadius)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the curvature radius of rounded rectangles.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLayout(int, java.lang.String)">setLayout</A></B>(int&nbsp;level,
          java.lang.String&nbsp;layout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the a new layout for the given level in the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLayouts(java.lang.String)">setLayouts</A></B>(java.lang.String&nbsp;layout)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the a new default layout for the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafBorderColour(java.awt.Color)">setLeafBorderColour</A></B>(java.awt.Color&nbsp;borderColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display leaf borders.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafBorderColour(int)">setLeafBorderColour</A></B>(int&nbsp;borderColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display leaf borders.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafBorderWeight(float)">setLeafBorderWeight</A></B>(float&nbsp;borderWeight)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the border weight of leaf nodes.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafFont(java.lang.String)">setLeafFont</A></B>(java.lang.String&nbsp;fontName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the font used to display leaf text.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafMaxTextSize(float)">setLeafMaxTextSize</A></B>(float&nbsp;size)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the maximum text size of the leaf labels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafTextAlignment(int, int)">setLeafTextAlignment</A></B>(int&nbsp;alignX,
                     int&nbsp;alignY)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the text alignment of leaf labels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafTextColour(java.awt.Color)">setLeafTextColour</A></B>(java.awt.Color&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display leaf text.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafTextColour(int)">setLeafTextColour</A></B>(int&nbsp;textColour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the colour used to display leaf text.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setLeafVectorWidth(float)">setLeafVectorWidth</A></B>(float&nbsp;vectWidth)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the width of the leaf displacement vectors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setMutation(float)">setMutation</A></B>(float&nbsp;mutation)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the mutation value that controls the degree of colour mutation when using evolutionary 
  colour scheme.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setRandColourLevel(int)">setRandColourLevel</A></B>(int&nbsp;level)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the level at which random colour mutation should occur when using an evolutionary colour scheme.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setSeed(long)">setSeed</A></B>(long&nbsp;seed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the seed value used to generate random colour mutations in the evolutionary colour scheme.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowArrowHead(boolean)">setShowArrowHead</A></B>(boolean&nbsp;showArrowHead)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not arrow heads are displayed when showing displacement vectors.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowBranchDisplacement(int, boolean)">setShowBranchDisplacement</A></B>(int&nbsp;level,
                          boolean&nbsp;showDisplacement)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not branch displacement vectors are shown at the given branch level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowBranchDisplacements(boolean)">setShowBranchDisplacements</A></B>(boolean&nbsp;showDisplacement)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not branch displacement vectors are shown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowBranchLabels(boolean)">setShowBranchLabels</A></B>(boolean&nbsp;showLabels)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not branch labels are to be displayed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowLeafBorders(boolean)">setShowLeafBorders</A></B>(boolean&nbsp;allowLeafBorders)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not leaf nodes are to be laid out with borders.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowLeafDisplacement(boolean)">setShowLeafDisplacement</A></B>(boolean&nbsp;showDisplacement)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not leaf displacement vectors are shown.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setShowLeafLabels(boolean)">setShowLeafLabels</A></B>(boolean&nbsp;showLabels)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether or not leaf labels are to be displayed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#setUseTransparency(boolean)">setUseTransparency</A></B>(boolean&nbsp;useTransparent)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether or not transparency is used to when drawing the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#showStatistics()">showStatistics</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Display the summary statistics describing the treemap.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#updateData()">updateData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the entire treemap using new tree data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#updateImage()">updateImage</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the tree map display to be shown in this panel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#updateLayout()">updateLayout</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the entire treemap layout.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/gicentre/treemappa/TreeMapPanel.html#writeImage(java.lang.String)">writeImage</A></B>(java.lang.String&nbsp;imgFileName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the tree map display to an image or SVG file with the given name.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_javax.swing.JPanel"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class javax.swing.JPanel</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>getAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_javax.swing.JComponent"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class javax.swing.JComponent</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.awt.Container"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.awt.Container</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.awt.Component"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.awt.Component</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="TreeMapPanel(int, int, org.gicentre.treemappa.TreeMappa)"><!-- --></A><H3>
TreeMapPanel</H3>
<PRE>
public <B>TreeMapPanel</B>(int&nbsp;width,
                    int&nbsp;height,
                    <A HREF="../../../org/gicentre/treemappa/TreeMappa.html" title="class in org.gicentre.treemappa">TreeMappa</A>&nbsp;treeMappa)</PRE>
<DL>
<DD>Creates the panel in which to place the visual representation of the tree map.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>width</CODE> - Default width of the tree map.<DD><CODE>height</CODE> - Default height of the tree map.<DD><CODE>treeMappa</CODE> - Object capable of creating a treemap.</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getSize()"><!-- --></A><H3>
getSize</H3>
<PRE>
public java.awt.Dimension <B>getSize</B>()</PRE>
<DL>
<DD>Reports the size of the panel containing the treemap. This size will have been determined at the
  point the tree map was first built.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>getSize</CODE> in class <CODE>java.awt.Component</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Size in pixel units of the treemap panel.</DL>
</DD>
</DL>
<HR>

<A NAME="getWidth()"><!-- --></A><H3>
getWidth</H3>
<PRE>
public int <B>getWidth</B>()</PRE>
<DL>
<DD>Reports the width of the panel containing the treemap. This width will have been determined at the
  point the tree map was first built.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>getWidth</CODE> in class <CODE>javax.swing.JComponent</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Width in pixel units of the treemap panel.</DL>
</DD>
</DL>
<HR>

<A NAME="getHeight()"><!-- --></A><H3>
getHeight</H3>
<PRE>
public int <B>getHeight</B>()</PRE>
<DL>
<DD>Reports the height of the panel containing the treemap. This height will have been determined at the
  point the tree map was first built.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>getHeight</CODE> in class <CODE>javax.swing.JComponent</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>Height in pixel units of the treemap panel.</DL>
</DD>
</DL>
<HR>

<A NAME="paintComponent(java.awt.Graphics)"><!-- --></A><H3>
paintComponent</H3>
<PRE>
public void <B>paintComponent</B>(java.awt.Graphics&nbsp;g)</PRE>
<DL>
<DD>Draws the tree map nodes.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>paintComponent</CODE> in class <CODE>javax.swing.JComponent</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>g</CODE> - Graphics context in which to draw.</DL>
</DD>
</DL>
<HR>

<A NAME="getImage()"><!-- --></A><H3>
getImage</H3>
<PRE>
public java.awt.image.BufferedImage <B>getImage</B>()</PRE>
<DL>
<DD>Reports the treemap image assuming it can store alpha (transparency) values. This is exactly equivalent to
  calling <code>getImage(true)</code>. Note that the returned image is not suitable for saving as a jpeg, bmp
  or gif file. To do this, call <code>getImage(false)</code>.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Image holding the treemap at its natural resolution.</DL>
</DD>
</DL>
<HR>

<A NAME="getImage(boolean)"><!-- --></A><H3>
getImage</H3>
<PRE>
public java.awt.image.BufferedImage <B>getImage</B>(boolean&nbsp;hasAlpha)</PRE>
<DL>
<DD>Reports the treemap image. Setting <code>hasAlpha</code> to true is less memory intensive, but can only be
  saved as a .png file. If this image is needed to be saved as a jpg, bmp or gif file, <code>hasAlpha</code>
  should be set to false.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>hasAlpha</CODE> - Determines if image is to use transparency or not.
<DT><B>Returns:</B><DD>Image holding the treemap at its natural resolution.</DL>
</DD>
</DL>
<HR>

<A NAME="writeImage(java.lang.String)"><!-- --></A><H3>
writeImage</H3>
<PRE>
public boolean <B>writeImage</B>(java.lang.String&nbsp;imgFileName)</PRE>
<DL>
<DD>Writes the tree map display to an image or SVG file with the given name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>imgFileName</CODE> - Name of image file to write.
<DT><B>Returns:</B><DD>True if file written successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="updateImage()"><!-- --></A><H3>
updateImage</H3>
<PRE>
public void <B>updateImage</B>()</PRE>
<DL>
<DD>Updates the tree map display to be shown in this panel.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="updateLayout()"><!-- --></A><H3>
updateLayout</H3>
<PRE>
public void <B>updateLayout</B>()</PRE>
<DL>
<DD>Updates the entire treemap layout. Should be called when some properties of the treemap that
  affect layout have been changed, but not the underlying tree structure, for example, changing
  the border width. Requests that simply change the rendering style, such as colours or text fonts
  should call <code>updateImage()</code> instead. Requests that change the underlying tree 
  structure, such as swapping data between hierarchy levels should call <code>updateData()</code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="updateData()"><!-- --></A><H3>
updateData</H3>
<PRE>
public void <B>updateData</B>()</PRE>
<DL>
<DD>Updates the entire treemap using new tree data. This method should only be called if the underlying
  tree data have been changed in some way. For changes to layout or display using the current tree
  data, call <code>updateLayout()</code> or <code>updateImage()</code> instead.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="showStatistics()"><!-- --></A><H3>
showStatistics</H3>
<PRE>
public boolean <B>showStatistics</B>()</PRE>
<DL>
<DD>Display the summary statistics describing the treemap.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>True if summary statistics were able to be calculated.</DL>
</DD>
</DL>
<HR>

<A NAME="getLeafAlignX()"><!-- --></A><H3>
getLeafAlignX</H3>
<PRE>
public int <B>getLeafAlignX</B>()</PRE>
<DL>
<DD>Provides the Processing leaf text horizontal alignment type, one of the Processing codes LEFT, CENTER or RIGHT.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Horizontal leaf text alignment.</DL>
</DD>
</DL>
<HR>

<A NAME="getLeafAlignY()"><!-- --></A><H3>
getLeafAlignY</H3>
<PRE>
public int <B>getLeafAlignY</B>()</PRE>
<DL>
<DD>Provides the Processing leaf text vertical alignment type, one of the Processing codes TOP, CENTER or BOTTOM.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Vertical leaf text alignment.</DL>
</DD>
</DL>
<HR>

<A NAME="getBranchAlignX()"><!-- --></A><H3>
getBranchAlignX</H3>
<PRE>
public int <B>getBranchAlignX</B>()</PRE>
<DL>
<DD>Provides the Processing branch text horizontal alignment type, one of the Processing codes LEFT, CENTER or RIGHT.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Horizontal branch text alignment.</DL>
</DD>
</DL>
<HR>

<A NAME="getBranchAlignY()"><!-- --></A><H3>
getBranchAlignY</H3>
<PRE>
public int <B>getBranchAlignY</B>()</PRE>
<DL>
<DD>Provides the Processing branch text vertical alignment type, one of the Processing codes TOP, CENTER or BOTTOM.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Vertical branch text alignment.</DL>
</DD>
</DL>
<HR>

<A NAME="setAllowVerticalLabels(boolean)"><!-- --></A><H3>
setAllowVerticalLabels</H3>
<PRE>
public boolean <B>setAllowVerticalLabels</B>(boolean&nbsp;allow)</PRE>
<DL>
<DD>Sets a whether or not vertical text labels are allowed for tall thin rectangles. Note that
  the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>allow</CODE> - If true, vertical labels will be permitted, if not, all labels will be horizontal.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBorderColour(int)"><!-- --></A><H3>
setBorderColour</H3>
<PRE>
public boolean <B>setBorderColour</B>(int&nbsp;borderColour)</PRE>
<DL>
<DD>Sets the colour used to display treemap borders. This version uses a single RGBA integer to
  represent the colour and is compatible with Processing's storage of colour values. Note that
  the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderColour</CODE> - New colour in which to display treemap node borders.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBorderColour(java.awt.Color)"><!-- --></A><H3>
setBorderColour</H3>
<PRE>
public boolean <B>setBorderColour</B>(java.awt.Color&nbsp;borderColour)</PRE>
<DL>
<DD>Sets the colour used to display treemap borders. Note that the treemap will not use this new 
  setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderColour</CODE> - New colour in which to display treemap node borders.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafTextColour(int)"><!-- --></A><H3>
setLeafTextColour</H3>
<PRE>
public boolean <B>setLeafTextColour</B>(int&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display leaf text. This version uses a single RGBA integer to represent 
  the colour and is compatible with Processing's storage of colour values. Note that the treemap
  will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>textColour</CODE> - New colour in which to display treemap leaf labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafBorderColour(int)"><!-- --></A><H3>
setLeafBorderColour</H3>
<PRE>
public boolean <B>setLeafBorderColour</B>(int&nbsp;borderColour)</PRE>
<DL>
<DD>Sets the colour used to display leaf borders. This version uses a single RGBA integer to represent 
  the colour and is compatible with Processing's storage of colour values. Note that the treemap
  will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderColour</CODE> - New colour in which to display treemap leaf borders.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafTextColour(java.awt.Color)"><!-- --></A><H3>
setLeafTextColour</H3>
<PRE>
public boolean <B>setLeafTextColour</B>(java.awt.Color&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display leaf text. Note that the treemap will not use this new 
  setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>textColour</CODE> - New colour in which to display treemap leaf labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafBorderColour(java.awt.Color)"><!-- --></A><H3>
setLeafBorderColour</H3>
<PRE>
public boolean <B>setLeafBorderColour</B>(java.awt.Color&nbsp;borderColour)</PRE>
<DL>
<DD>Sets the colour used to display leaf borders. Note that the treemap will not use this new 
  setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderColour</CODE> - New colour in which to display treemap leaf borders.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchTextColours(int)"><!-- --></A><H3>
setBranchTextColours</H3>
<PRE>
public boolean <B>setBranchTextColours</B>(int&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display text at all branch levels. This version uses a single RGBA
  integer to represent the colour and is compatible with Processing's storage of colour values.
  Note that the treemap will not use this new  setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>textColour</CODE> - New colour in which to display treemap branch labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchTextColours(java.awt.Color)"><!-- --></A><H3>
setBranchTextColours</H3>
<PRE>
public boolean <B>setBranchTextColours</B>(java.awt.Color&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display text at all branch levels. Note that the treemap will 
  not use this new  setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>textColour</CODE> - New colour in which to display treemap branch labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchTextColour(int, int)"><!-- --></A><H3>
setBranchTextColour</H3>
<PRE>
public boolean <B>setBranchTextColour</B>(int&nbsp;level,
                                   int&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display branch text at the given level. This version uses a single RGBA
  integer to represent the colour and is compatible with Processing's storage of colour values. 
  Note that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>textColour</CODE> - New colour in which to display treemap branch labels at the given level.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchTextColour(int, java.awt.Color)"><!-- --></A><H3>
setBranchTextColour</H3>
<PRE>
public boolean <B>setBranchTextColour</B>(int&nbsp;level,
                                   java.awt.Color&nbsp;textColour)</PRE>
<DL>
<DD>Sets the colour used to display branch text at the given level. Note that the treemap will 
  not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>textColour</CODE> - New colour in which to display treemap branch labels at the given level.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchFonts(java.lang.String)"><!-- --></A><H3>
setBranchFonts</H3>
<PRE>
public boolean <B>setBranchFonts</B>(java.lang.String&nbsp;fontName)</PRE>
<DL>
<DD>Sets the font used to display text at all branch levels. Note that the treemap will 
  not use this new  setting until a call to <code>updateImage()</code> is made.  Note also that
  this will have no effect on the treemaps drawn directly in Processing via <code>PTreeMappa.draw()</code>,
  which uses the currently selected Processing font for all labels.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fontName</CODE> - Name of new font in which to display treemap branch labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchFont(int, java.lang.String)"><!-- --></A><H3>
setBranchFont</H3>
<PRE>
public boolean <B>setBranchFont</B>(int&nbsp;level,
                             java.lang.String&nbsp;fontName)</PRE>
<DL>
<DD>Sets the font used to display branch text at the given level. Note that the treemap will 
  not use this new setting until a call to <code>updateImage()</code> is made. Note also that
  this will have no effect on the treemaps drawn directly in Processing via <code>PTreeMappa.draw()</code>,
  which uses the currently selected Processing font for all labels.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>fontName</CODE> - Name of font in which to display treemap branch labels at the given level.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafFont(java.lang.String)"><!-- --></A><H3>
setLeafFont</H3>
<PRE>
public boolean <B>setLeafFont</B>(java.lang.String&nbsp;fontName)</PRE>
<DL>
<DD>Sets the font used to display leaf text. Note that the treemap will not use this new setting
  until a call to <code>updateImage()</code> is made.  Note also that this will have no 
  effect on the treemaps drawn directly in Processing via <code>PTreeMappa.draw()</code>,
  which uses the currently selected Processing font for all labels.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fontName</CODE> - New font in which to display treemap leaf labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafVectorWidth(float)"><!-- --></A><H3>
setLeafVectorWidth</H3>
<PRE>
public boolean <B>setLeafVectorWidth</B>(float&nbsp;vectWidth)</PRE>
<DL>
<DD>Sets the width of the leaf displacement vectors. Note that the treemap will not use this new setting
  until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vectWidth</CODE> - Width of leaf displacement vectors in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchMaxTextSize(int, float)"><!-- --></A><H3>
setBranchMaxTextSize</H3>
<PRE>
public boolean <B>setBranchMaxTextSize</B>(int&nbsp;level,
                                    float&nbsp;size)</PRE>
<DL>
<DD>Sets the maximum text size of the branch labels at the given branch level. Note that the 
  treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>size</CODE> - Maximum vertical text size in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchMaxTextSizes(float)"><!-- --></A><H3>
setBranchMaxTextSizes</H3>
<PRE>
public boolean <B>setBranchMaxTextSizes</B>(float&nbsp;size)</PRE>
<DL>
<DD>Sets the maximum text size of the branch labels at all hierarchy levels. Note that the 
  treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>size</CODE> - Maximum vertical text size in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafMaxTextSize(float)"><!-- --></A><H3>
setLeafMaxTextSize</H3>
<PRE>
public boolean <B>setLeafMaxTextSize</B>(float&nbsp;size)</PRE>
<DL>
<DD>Sets the maximum text size of the leaf labels. Note that the treemap will not use this 
  new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>size</CODE> - Maximum vertical text size in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setMutation(float)"><!-- --></A><H3>
setMutation</H3>
<PRE>
public boolean <B>setMutation</B>(float&nbsp;mutation)</PRE>
<DL>
<DD>Sets the mutation value that controls the degree of colour mutation when using evolutionary 
  colour scheme. Note that the treemap will not use this new setting until a call to 
  <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>mutation</CODE> - Mutation index between 0 (inherits parent colour exactly) and 1 (independent of parent colour).
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setRandColourLevel(int)"><!-- --></A><H3>
setRandColourLevel</H3>
<PRE>
public boolean <B>setRandColourLevel</B>(int&nbsp;level)</PRE>
<DL>
<DD>Sets the level at which random colour mutation should occur when using an evolutionary colour scheme.
  Note that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level beyond which colour mutation should occur.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setSeed(long)"><!-- --></A><H3>
setSeed</H3>
<PRE>
public boolean <B>setSeed</B>(long&nbsp;seed)</PRE>
<DL>
<DD>Sets the seed value used to generate random colour mutations in the evolutionary colour scheme.
  This allows a repeatable, but random colour scheme to be used.
  Note that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>seed</CODE> - New random seed.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowArrowHead(boolean)"><!-- --></A><H3>
setShowArrowHead</H3>
<PRE>
public boolean <B>setShowArrowHead</B>(boolean&nbsp;showArrowHead)</PRE>
<DL>
<DD>Determines whether or not arrow heads are displayed when showing displacement vectors.
  Note that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showArrowHead</CODE> - Arrow heads shown if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowBranchDisplacement(int, boolean)"><!-- --></A><H3>
setShowBranchDisplacement</H3>
<PRE>
public boolean <B>setShowBranchDisplacement</B>(int&nbsp;level,
                                         boolean&nbsp;showDisplacement)</PRE>
<DL>
<DD>Determines whether or not branch displacement vectors are shown at the given branch level. Note 
  that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>showDisplacement</CODE> - Displacement vectors will be shown if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowBranchDisplacements(boolean)"><!-- --></A><H3>
setShowBranchDisplacements</H3>
<PRE>
public boolean <B>setShowBranchDisplacements</B>(boolean&nbsp;showDisplacement)</PRE>
<DL>
<DD>Determines whether or not branch displacement vectors are shown. Note 
  that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showDisplacement</CODE> - Displacement vectors will be shown if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowLeafDisplacement(boolean)"><!-- --></A><H3>
setShowLeafDisplacement</H3>
<PRE>
public boolean <B>setShowLeafDisplacement</B>(boolean&nbsp;showDisplacement)</PRE>
<DL>
<DD>Determines whether or not leaf displacement vectors are shown. Note 
  that the treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showDisplacement</CODE> - Displacement vectors will be shown if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchVectorWidth(int, float)"><!-- --></A><H3>
setBranchVectorWidth</H3>
<PRE>
public boolean <B>setBranchVectorWidth</B>(int&nbsp;level,
                                    float&nbsp;vectWidth)</PRE>
<DL>
<DD>Sets the width of the branch displacement vectors at the given branch level. Note that the 
  treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Hierarchy level at which to make the change.<DD><CODE>vectWidth</CODE> - Width of branch displacement vectors in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchVectorWidths(float)"><!-- --></A><H3>
setBranchVectorWidths</H3>
<PRE>
public boolean <B>setBranchVectorWidths</B>(float&nbsp;vectWidth)</PRE>
<DL>
<DD>Sets the width of the branch displacement vectors at all branch levels. Note that the 
  treemap will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vectWidth</CODE> - Width of branch displacement vectors in pixel units.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setColourTable(org.gicentre.utils.colour.ColourTable)"><!-- --></A><H3>
setColourTable</H3>
<PRE>
public boolean <B>setColourTable</B>(org.gicentre.utils.colour.ColourTable&nbsp;cTable)</PRE>
<DL>
<DD>Sets a new colour table to be used to identify treemap node colours. Unlike the other set methods
  that alter the treemap appearance, this method does not update the TreeMapProperties object associated
  with the treemap. This is because that property is the name of a colour table file, and the 
  incoming colour table supplied to this method may not have a version saved to file. Note also that
  the treemap will not use these new colours until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cTable</CODE> - New colour table to use when identifying treemap colours.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setCurvature(float)"><!-- --></A><H3>
setCurvature</H3>
<PRE>
public void <B>setCurvature</B>(float&nbsp;curveRadius)</PRE>
<DL>
<DD>Sets the curvature radius of rounded rectangles. If 0, normal rectangles with sharp corners are
  drawn in the treemap. Values greater than 0 increase the curviness of the rectangles.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>curveRadius</CODE> - Radius of curvature of treemap rectangle corners in pixel units.</DL>
</DD>
</DL>
<HR>

<A NAME="setUseTransparency(boolean)"><!-- --></A><H3>
setUseTransparency</H3>
<PRE>
public boolean <B>setUseTransparency</B>(boolean&nbsp;useTransparent)</PRE>
<DL>
<DD>Sets whether or not transparency is used to when drawing the treemap. This can be useful when
  creating PDF images that cannot display transparent colours correctly. Note that the treemap 
  will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>useTransparent</CODE> - Transparency is used if true, otherwise, opaque grey levels are used for text labels.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowBranchLabels(boolean)"><!-- --></A><H3>
setShowBranchLabels</H3>
<PRE>
public boolean <B>setShowBranchLabels</B>(boolean&nbsp;showLabels)</PRE>
<DL>
<DD>Determines whether or not branch labels are to be displayed. Note that the treemap 
  will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showLabels</CODE> - Branch labels will be displayed if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafTextAlignment(int, int)"><!-- --></A><H3>
setLeafTextAlignment</H3>
<PRE>
public boolean <B>setLeafTextAlignment</B>(int&nbsp;alignX,
                                    int&nbsp;alignY)</PRE>
<DL>
<DD>Determines the text alignment of leaf labels. This only has an effect when displaying treemaps in
  Processing via the PTreeMAppa class. Note that the treemap will not use this new setting until a call 
  to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>alignX</CODE> - Processing code for horizontal text alignment. Should be one of LEFT, CENTER  or RIGHT.<DD><CODE>alignY</CODE> - Processing code for vertical text alignment. Should be one of TOP, CENTER  or BOTTOM.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBranchTextAlignment(int, int)"><!-- --></A><H3>
setBranchTextAlignment</H3>
<PRE>
public boolean <B>setBranchTextAlignment</B>(int&nbsp;alignX,
                                      int&nbsp;alignY)</PRE>
<DL>
<DD>Determines the text alignment of branch labels. This only has an effect when displaying treemaps in
  Processing via the PTreeMAppa class. Note that the treemap will not use this new setting until a call 
  to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>alignX</CODE> - Processing code for horizontal text alignment. Should be one of LEFT, CENTER  or RIGHT.<DD><CODE>alignY</CODE> - Processing code for vertical text alignment. Should be one of TOP, CENTER  or BOTTOM.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowLeafLabels(boolean)"><!-- --></A><H3>
setShowLeafLabels</H3>
<PRE>
public boolean <B>setShowLeafLabels</B>(boolean&nbsp;showLabels)</PRE>
<DL>
<DD>Determines whether or not leaf labels are to be displayed. Note that the treemap 
  will not use this new setting until a call to <code>updateImage()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>showLabels</CODE> - Leaf labels will be displayed if true.
<DT><B>Returns:</B><DD>True if change has been made successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="getColourTable()"><!-- --></A><H3>
getColourTable</H3>
<PRE>
public org.gicentre.utils.colour.ColourTable <B>getColourTable</B>()</PRE>
<DL>
<DD>Provides the colour table currently used to identify treemap node colours.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Colour table used when identifying treemap colours.</DL>
</DD>
</DL>
<HR>

<A NAME="getCurvature()"><!-- --></A><H3>
getCurvature</H3>
<PRE>
public float <B>getCurvature</B>()</PRE>
<DL>
<DD>Reports the curvature radius of rounded rectangles. If 0, normal rectangles with sharp corners are
  drawn in the treemap. Values greater than 0 increase the curviness of the rectangles.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Radius of curvature of treemap rectangle corners in pixel units.</DL>
</DD>
</DL>
<HR>

<A NAME="setAlignments(java.lang.String)"><!-- --></A><H3>
setAlignments</H3>
<PRE>
public boolean <B>setAlignments</B>(java.lang.String&nbsp;alignment)</PRE>
<DL>
<DD>Sets the alignment settings for all levels within the treemap. Note that since this operation
  requires the recalculation of the treemap layout, no changes will be made until <code>updateLayout()</code>
  is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>alignment</CODE> - Alignment setting to use. Valid values are 'horizontal', 'vertical' and 'free'.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setAlignment(int, java.lang.String)"><!-- --></A><H3>
setAlignment</H3>
<PRE>
public boolean <B>setAlignment</B>(int&nbsp;level,
                            java.lang.String&nbsp;alignment)</PRE>
<DL>
<DD>Sets the alignment setting for the given level of the treemap. Note that since this operation
  requires the recalculation of the treemap layout, no changes will be made until <code>updateLayout()</code>
  is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Level of the hierarchy at which the given border setting is to apply.<DD><CODE>alignment</CODE> - Alignment setting to use. Valid values are 'horizontal', 'vertical' and 'free'.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBorders(double)"><!-- --></A><H3>
setBorders</H3>
<PRE>
public boolean <B>setBorders</B>(double&nbsp;borderSize)</PRE>
<DL>
<DD>Sets the border size of the treemap. Note that since this operation requires the recalculation
  of the treemap layout, no changes will be made until <code>updateLayout()</code> is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderSize</CODE> - Border size in pixels used to separate treemap nodes.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setShowLeafBorders(boolean)"><!-- --></A><H3>
setShowLeafBorders</H3>
<PRE>
public boolean <B>setShowLeafBorders</B>(boolean&nbsp;allowLeafBorders)</PRE>
<DL>
<DD>Determines whether or not leaf nodes are to be laid out with borders. Note that since this 
  operation requires the recalculation of the treemap layout, no changes will be made until
  <code>updateLayout()</code> is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>allowLeafBorders</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setBorderWeights(float)"><!-- --></A><H3>
setBorderWeights</H3>
<PRE>
public boolean <B>setBorderWeights</B>(float&nbsp;borderWeight)</PRE>
<DL>
<DD>Sets the border weight of the treemap. Unlike <code>setBorders()</code> this does not affect the 
  border spacing between nodes, but rather the thickness of the border line used.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderWeight</CODE> - Thickness of border lines in pixels used to separate treemap nodes 
                      or -1 for default border weight.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLeafBorderWeight(float)"><!-- --></A><H3>
setLeafBorderWeight</H3>
<PRE>
public boolean <B>setLeafBorderWeight</B>(float&nbsp;borderWeight)</PRE>
<DL>
<DD>Sets the border weight of leaf nodes. Unlike <code>setBorders()</code> this does not affect the 
  border spacing between nodes, but rather the thickness of the border line used.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>borderWeight</CODE> - Thickness of border lines in pixels used to separate leaf nodes.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBorder(int, float)"><!-- --></A><H3>
setBorder</H3>
<PRE>
public boolean <B>setBorder</B>(int&nbsp;level,
                         float&nbsp;borderSize)</PRE>
<DL>
<DD>Sets the border size of the nodes at the given level in the treemap. Note that since this operation
  requires the recalculation of the treemap layout, no changes will be made until <code>updateLayout()</code>
  is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Level of the hierarchy at which the given border setting is to apply.<DD><CODE>borderSize</CODE> - Border size in pixels used to separate treemap nodes.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setBorderWeight(int, float)"><!-- --></A><H3>
setBorderWeight</H3>
<PRE>
public boolean <B>setBorderWeight</B>(int&nbsp;level,
                               float&nbsp;borderWeight)</PRE>
<DL>
<DD>Sets the border weight of the nodes at the given level in the treemap. Unlike <code>setBorder()</code> 
  this does not affect the border spacing between nodes, but rather the thickness of the border line used.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Level of the hierarchy at which the given border weight setting is to apply.<DD><CODE>borderWeight</CODE> - Thickness of border lines in pixels used to separate treemap nodes 
                      or -1 for default border weight
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLayouts(java.lang.String)"><!-- --></A><H3>
setLayouts</H3>
<PRE>
public boolean <B>setLayouts</B>(java.lang.String&nbsp;layout)</PRE>
<DL>
<DD>Sets the a new default layout for the treemap. Note that no visible changes to the layout will be made until 
  <code>updateLayout()</code> is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>layout</CODE> - Name of new layout algorithm to use.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="setLayout(int, java.lang.String)"><!-- --></A><H3>
setLayout</H3>
<PRE>
public boolean <B>setLayout</B>(int&nbsp;level,
                         java.lang.String&nbsp;layout)</PRE>
<DL>
<DD>Sets the a new layout for the given level in the treemap. Note that no visible changes to the layout will be made until 
  <code>updateLayout()</code> is called.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Level of the hierarchy at which the given layout setting is to apply.<DD><CODE>layout</CODE> - Name of new layout algorithm to use.
<DT><B>Returns:</B><DD>True if new property is updated successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="getLayouts()"><!-- --></A><H3>
getLayouts</H3>
<PRE>
public java.lang.String[] <B>getLayouts</B>()</PRE>
<DL>
<DD>Reports the currently used treemap layouts at each level of the hierarchy.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Name of the layouts currently being used to produce the treemap. The first item is the layout
          of the nodes in the root of the tree, the second the children of the those nodes etc.</DL>
</DD>
</DL>
<HR>

<A NAME="oCut(int)"><!-- --></A><H3>
oCut</H3>
<PRE>
public boolean <B>oCut</B>(int&nbsp;level)</PRE>
<DL>
<DD>Removes the tree data from a the given level of the hierarchy. If the nodes to cut
  are leaves, they are removed entirely from the tree. If they are branches, then their
  children are attached to the removed node's parent. Note that the treemap will not be
  updated until a call to <code>updateLayout()</code> is made.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>level</CODE> - Level of the hierarchy at which to apply the operation.
<DT><B>Returns:</B><DD>True if the operation has been performed successfully.</DL>
</DD>
</DL>
<HR>

<A NAME="getBorders()"><!-- --></A><H3>
getBorders</H3>
<PRE>
public double[] <B>getBorders</B>()</PRE>
<DL>
<DD>Provides the set of ordered border width settings for each level of the treemap hierarchy.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Ordered collection of border width settings.</DL>
</DD>
</DL>
<HR>

<A NAME="getPixelToGeo(java.awt.geom.Point2D)"><!-- --></A><H3>
getPixelToGeo</H3>
<PRE>
public java.awt.geom.Point2D <B>getPixelToGeo</B>(java.awt.geom.Point2D&nbsp;pxl)</PRE>
<DL>
<DD>Transforms the given point from pixel to georeferenced coordinates.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pxl</CODE> - Pixel coordinate pair to transform.
<DT><B>Returns:</B><DD>Georeferenced coordinate pair representing the given pixel coordinates.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/TreeMapPanel.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/gicentre/treemappa/TreeMappa.html" title="class in org.gicentre.treemappa"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/gicentre/treemappa/TreeMapProperties.html" title="class in org.gicentre.treemappa"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/gicentre/treemappa/TreeMapPanel.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TreeMapPanel.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_classes_inherited_from_class_javax.swing.JPanel">NESTED</A>&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_javax.swing.JComponent">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
<i>treeMappa V.3.2.1, API documentation generated 3rd April, 2014</i>
</BODY>
</HTML>
